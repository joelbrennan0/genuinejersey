<script src="//maps.google.com/maps/api/js?v=3.13&amp;sensor=true&amp;libraries=geometry" type="text/javascript"></script>
<script src='//google-maps-utility-library-v3.googlecode.com/svn/tags/markerclustererplus/2.0.14/src/markerclusterer_packed.js' type='text/javascript'></script>

<div style='width: 100%;'>
  <div id="map" style='width: 100%; height: 100vh;'></div>
</div>

<div id="sidebar">
<div id="header">
	<h2>Filter Vendors</h2>
	<div>
	<div id="content">
	<h3 style="display: inline;">Around Me (</h3><div style="display: inline; margin: 0 auto;"><h3 id="range" style="display: inline;">1</h3><h4 style="display: inline;">)km</h4></div>
	<div id="filter-1">
		<input type="range" min="1" max="15" value="0" step="1" onchange="showValue(this.value)" style="width:100%" autocomplete="off"/>
<script type="text/javascript">
    var range = document.getElementById("range");
    var filter1 = document.getElementById("filter-1");
    var newRadius = range.innerHTML;

function showValue(newValue)
{
	range.innerHTML=newValue;
}
</script>
<p style="float: left; width: 50%; margin-top: 0">1km</p><p style="float: right; margin-top: 0;">15km</p>
	</div>
  <div id="reset-btns">
    <button class="btn-small" id="showPos" onclick="showMarker();">Show Me</button>
    <button class="btn-small" id="hidePos" onclick="clearMarker();">Hide Me</button>
    <button class="btn-small" id="geoPos" onclick="geolocateUser();">My Location</button>
  </div>

  <%= form_tag root_path, :method => 'get' do %>

  	<div id="filter-3">
  	  <h3>Filter by Parish</h3>
      <%= select_tag("parish", options_for_select(User::PARISHES, params[:parish]), prompt: "All", :onchange => 'this.form.submit()' ) %>
    </div>

  	<div id="filter-2">
      <h3>Filter by Category</h3>
      <%= select_tag("category_id", options_from_collection_for_select(Category.all, :id, :name, params[:category_id]), prompt: "All", :onchange => 'this.form.submit()') %>
    </div>

  <% end %>

  <%= button_to "Reset Filters", root_path, :method => "get", :class => 'reset-btn' %>

	</div>
</div>

<% if user_signed_in? %>

<%= link_to "Sign out", destroy_user_session_path, :method => :delete %>
<% else %>
<%= link_to "Sign in", new_user_session_path %>

<% end %>

<script type="text/javascript">
  
  var handler = Gmaps.build('Google');
  var markers;
  handler.buildMap({ provider: { scrollwheel: false, center: new google.maps.LatLng(49.2, -2.02), zoom: 12
    }, internal: {id: 'map'}}, function(){
    markers = handler.addMarkers(<%=raw @hash.to_json %>);
    handler.bounds.extendWith(markers);
    handler.fitMapToBounds();
      // Define some variables so we can access them from anywhere
  var map;
  var userLatLng;
  var circle;
  var marker;
  var drawCircle;
  var range;
  var updateRadius;
  var delayedUpdateRadius;
  });

   function writeAddressName(latLng) {
var geocoder = new google.maps.Geocoder();
geocoder.geocode({
"location": latLng
},
function(results, status) {
if (status == google.maps.GeocoderStatus.OK)
document.getElementById("address").innerHTML = results[0].formatted_address;
else
document.getElementById("error").innerHTML += "Unable to retrieve your address" + "<br />";
});
}
function geolocationSuccess(position) {
userLatLng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
// Write the formatted address
writeAddressName(userLatLng);
// var mapObject = new google.maps.Map(document.getElementById("map"));
// console.log(mapObject);
// console.log(handler);
usermap = handler.map.serviceObject;
// Place the marker
marker = new google.maps.Marker({
map: usermap,
position: userLatLng,
title: 'Drag Me!',
draggable: true,
animation: google.maps.Animation.DROP,
});
drawCircle = function(){
// Draw a circle around the user position to have an idea of the current localization accuracy
var options = {
center: userLatLng,
// radius: position.coords.accuracy,
radius: newRadius * 1000,
map: usermap,
fillColor: '#333',
fillOpacity: 0.5,
strokeColor: '#0000',
strokeOpacity: 1.0
};
circle = new google.maps.Circle(options);
usermap.fitBounds(circle.getBounds());
circle.bindTo('center', marker, 'position');
};
drawCircle();
google.maps.event.addDomListener(filter1, 'click', updateRadius);
};
updateRadius = function () {
newRadius = range.innerHTML;
circle.setRadius(newRadius *= 1000);
usermap.fitBounds(circle.getBounds());
}
delayedUpdateRadius = function () {
setTimeout(function() {updateRadius();}, 6000);
}
//Removing location marker and circle if user don't want it
function setAllMap(map) {
marker.setMap(map);
}
function clearMarker() {
circle.setMap(null);
setAllMap(null);
}
function showMarker() {
setAllMap(handler.map.serviceObject);
circle.setMap(handler.map.serviceObject);
}
function deleteMarker() {
clearMarker();
marker = [];
circle = 0;
}
function geolocationError(positionError) {
document.getElementById("error").innerHTML += "Error: " + positionError.message + "<br />";
}
function geolocateUser() {
// If the browser supports the Geolocation API
if (navigator.geolocation)
{
var positionOptions = {
enableHighAccuracy: true,
timeout: 10 * 1000 // 10 seconds
};
navigator.geolocation.getCurrentPosition(geolocationSuccess, geolocationError, positionOptions);
handler.bounds.extendWith(markers);
handler.fitMapToBounds();
}
else
document.getElementById("error").innerHTML += "Your browser doesn't support the Geolocation API";
}
google.maps.event.addDomListener(window, 'load', initialize);
</script>


</script>












